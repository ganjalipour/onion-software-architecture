// <auto-generated />
using System;
using Consulting.Infrastructure.Core.Data.Repositories.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Consulting.Infrastructure.Core.Migrations
{
    [DbContext(typeof(AppCommandDBContext))]
    partial class AppCommandDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:Customer.CustomerHeadSerialSequence", "'CustomerHeadSerialSequence', 'Customer', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Customer.TransactionSerialSequence", "'TransactionSerialSequence', 'Customer', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Consulting.Domains.Core.Consult.Entities.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Comment","Consult");
                });

            modelBuilder.Entity("Consulting.Domains.Core.Consult.Entities.ConsultType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConsultTypeDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsultTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ConsultType","Consult");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConsultTypeDesc = "شغلی",
                            ConsultTypeName = "Job"
                        },
                        new
                        {
                            ID = 2,
                            ConsultTypeDesc = "تحصیلی",
                            ConsultTypeName = "Educational"
                        },
                        new
                        {
                            ID = 3,
                            ConsultTypeDesc = "خانواده",
                            ConsultTypeName = "Family"
                        },
                        new
                        {
                            ID = 4,
                            ConsultTypeDesc = "ازدواج",
                            ConsultTypeName = "Marriage"
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Core.Consult.Entities.Consultant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsultTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ConsultTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Consultant","Consult");
                });

            modelBuilder.Entity("Consulting.Domains.Core.Consult.Entities.Expertise", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConsultantID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("ExpertiseDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpertiseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ConsultantID");

                    b.ToTable("Expertise","Consult");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ExpertiseDesc = "پزشکان سلامت",
                            ExpertiseName = "HealthDoctors"
                        },
                        new
                        {
                            ID = 2,
                            ExpertiseDesc = "وکلای دادگستری",
                            ExpertiseName = "Lawyers"
                        },
                        new
                        {
                            ID = 3,
                            ExpertiseDesc = "روانشناس",
                            ExpertiseName = "Psychologist"
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Core.Consult.Entities.Question", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("IssueUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssuerDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Question","Consult");
                });

            modelBuilder.Entity("Consulting.Domains.Core.Consult.Entities.Reply", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("IssueUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssuerDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Reply","Consult");
                });

            modelBuilder.Entity("Consulting.Domains.Core.Core.Entities.AttachmentType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentTypeCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("AttachmentTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentTypeDesc")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AttachmentTypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("IsRequierd")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AttachmentTypeCategoryID");

                    b.ToTable("AttachmentTypes","Core");

                    b.HasData(
                        new
                        {
                            ID = 2,
                            AttachmentTypeCategoryID = 1,
                            AttachmentTypeCode = 1112,
                            AttachmentTypeDesc = "عکس شناسنامه",
                            IsRequierd = true
                        },
                        new
                        {
                            ID = 3,
                            AttachmentTypeCategoryID = 1,
                            AttachmentTypeCode = 11121,
                            AttachmentTypeDesc = "کارت ملی",
                            IsRequierd = true
                        },
                        new
                        {
                            ID = 4,
                            AttachmentTypeCategoryID = 1,
                            AttachmentTypeCode = 11122,
                            AttachmentTypeDesc = "کارت پایان خدمت",
                            IsRequierd = false
                        },
                        new
                        {
                            ID = 5,
                            AttachmentTypeCategoryID = 1,
                            AttachmentTypeCode = 11123,
                            AttachmentTypeDesc = "مدرک تحصیلی",
                            IsRequierd = false
                        },
                        new
                        {
                            ID = 6,
                            AttachmentTypeCategoryID = 1,
                            AttachmentTypeCode = 11128,
                            AttachmentTypeDesc = "گذر نامه",
                            IsRequierd = false
                        },
                        new
                        {
                            ID = 1,
                            AttachmentTypeCategoryID = 2,
                            AttachmentTypeCode = 11130,
                            AttachmentTypeDesc = " عکس کاربری",
                            IsRequierd = false
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Core.Core.Entities.AttachmentTypeCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentTypeCategoryCode")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentTypeCategoryDesc")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("AttachmentTypeCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentTypeCategoryName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("AttachmentTypeCategories","Core");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AttachmentTypeCategoryCode = 1,
                            AttachmentTypeCategoryDesc = "مشتریان",
                            AttachmentTypeCategoryID = 0
                        },
                        new
                        {
                            ID = 2,
                            AttachmentTypeCategoryCode = 2,
                            AttachmentTypeCategoryDesc = "کاربران",
                            AttachmentTypeCategoryID = 0
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Core.Core.Entities.MilitaryServiceStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("MilitaryServiceStatusCode")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("MilitaryServiceStatusDesc")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MilitaryServiceStatusName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("MilitaryServiceStatus","Core");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            MilitaryServiceStatusDesc = "معاف",
                            MilitaryServiceStatusName = "Exempt"
                        },
                        new
                        {
                            ID = 2,
                            MilitaryServiceStatusDesc = "معاف پزشکی",
                            MilitaryServiceStatusName = "Exempt"
                        },
                        new
                        {
                            ID = 3,
                            MilitaryServiceStatusDesc = "درحال خدمت",
                            MilitaryServiceStatusName = "Serving"
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Core.Core.Entities.Nationality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("NationalityCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("NationalityDesc")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NationalityName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Nationality","Core");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            NationalityDesc = "ایرانی",
                            NationalityName = "Irani"
                        },
                        new
                        {
                            ID = 2,
                            NationalityDesc = "خارجی",
                            NationalityName = "Khareji"
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMenu")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Activities","Core");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 101,
                            Description = "این صفحه جهت نمایش داشبورد اصلی می باشد.",
                            IconClass = "dashboard",
                            IsActive = true,
                            IsMenu = true,
                            Name = "dashboard",
                            Order = 1,
                            ParentId = 0,
                            Path = "/mp/dashboard",
                            Title = "پیشخوان"
                        },
                        new
                        {
                            Id = 2,
                            Code = 102,
                            Description = "امنیت",
                            IconClass = "legal",
                            IsActive = true,
                            IsMenu = true,
                            Name = "Security",
                            Order = 2,
                            ParentId = 0,
                            Path = "/mp/roleManagement",
                            Title = "امنیت"
                        },
                        new
                        {
                            Id = 3,
                            Code = 103,
                            Description = "این صفحه جهت نمایش و مدیریت کاربران می باشد.",
                            IconClass = "users",
                            IsActive = true,
                            IsMenu = true,
                            Name = "userManagement",
                            Order = 3,
                            ParentId = 2,
                            Path = "/mp/userManagement",
                            Title = "مدیریت کاربران"
                        },
                        new
                        {
                            Id = 4,
                            Code = 104,
                            Description = "این صفحه جهت نمایش و مدیریت دفاتر مشاوره می باشد.",
                            IconClass = "briefcase",
                            IsActive = true,
                            IsMenu = true,
                            Name = "branchesManagement",
                            Order = 4,
                            ParentId = 2,
                            Path = "/mp/branchesManagement",
                            Title = "مدیریت دفاتر مشاوره"
                        },
                        new
                        {
                            Id = 5,
                            Code = 105,
                            Description = "این صفحه جهت نمایش و مدیریت رمز می باشد.",
                            IconClass = "key",
                            IsActive = true,
                            IsMenu = true,
                            Name = "changePassword",
                            Order = 5,
                            ParentId = 2,
                            Path = "/mp/changePassword",
                            Title = "تغییر رمز"
                        },
                        new
                        {
                            Id = 6,
                            Code = 106,
                            Description = "این صفحه جهت نمایش و مدیریت نقش ها می باشد.",
                            IconClass = "keyboard-o",
                            IsActive = true,
                            IsMenu = true,
                            Name = "roleManagement",
                            Order = 6,
                            ParentId = 2,
                            Path = "/mp/roleManagement",
                            Title = "مدیریت نقش ها"
                        },
                        new
                        {
                            Id = 7,
                            Code = 107,
                            Description = "منوی مشتریان",
                            IconClass = "legal",
                            IsActive = true,
                            IsMenu = true,
                            Name = "Security",
                            Order = 7,
                            ParentId = 0,
                            Path = "/mp/roleManagement",
                            Title = "مشتریان"
                        },
                        new
                        {
                            Id = 8,
                            Code = 109,
                            Description = "این صفحه جهت نمایش لیست مشتریان می باشد",
                            IconClass = "image",
                            IsActive = true,
                            IsMenu = true,
                            Name = "Customer",
                            Order = 8,
                            ParentId = 7,
                            Path = "/mp/customerManagement",
                            Title = "اطلاعات مشتریان / اعضا"
                        },
                        new
                        {
                            Id = 9,
                            Code = 108,
                            Description = "لطفا منتظر بمانید...",
                            IsActive = true,
                            IsMenu = false,
                            Name = "صفحه انتظار",
                            Order = 9,
                            ParentId = 0,
                            Path = "/mp/WaitingPage",
                            Title = "لطفا منتظر بمانید..."
                        },
                        new
                        {
                            Id = 10,
                            Code = 110,
                            Description = "جلسات",
                            IconClass = "legal",
                            IsActive = true,
                            IsMenu = true,
                            Name = "Sessions",
                            Order = 10,
                            ParentId = 0,
                            Path = "/mp/Sessions",
                            Title = "جلسات"
                        },
                        new
                        {
                            Id = 11,
                            Code = 111,
                            Description = "مدیریت پیام ها",
                            IconClass = "legal",
                            IsActive = true,
                            IsMenu = true,
                            Name = "MessagesManagement",
                            Order = 11,
                            ParentId = 10,
                            Path = "/mp/Messages",
                            Title = "مدیریت پیام ها"
                        },
                        new
                        {
                            Id = 12,
                            Code = 112,
                            Description = "مدیریت جلسات",
                            IconClass = "legal",
                            IsActive = true,
                            IsMenu = true,
                            Name = "SessionsManagement",
                            Order = 12,
                            ParentId = 10,
                            Path = "/mp/SessionManagement",
                            Title = "مدیریت جلسات"
                        },
                        new
                        {
                            Id = 13,
                            Code = 113,
                            Description = "خروج",
                            IconClass = "sign-out-alt",
                            IsActive = true,
                            IsMenu = true,
                            Name = "SignOut",
                            Order = 2000,
                            ParentId = 0,
                            Path = "/mp/logOut",
                            Title = "خروج"
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.Attachment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("CustomerHeadID")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SessionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AttachmentTypeID");

                    b.HasIndex("CustomerHeadID");

                    b.HasIndex("SessionID");

                    b.ToTable("Attachments","Core");
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.Branch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("BDN")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("BranchHeadName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("MeetingAddress1")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("MeetingAddress2")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("OSTANCode")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Serial")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ZoneID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ZoneID");

                    b.ToTable("Branches","Core");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BranchCode = "380001",
                            BranchName = "تست",
                            CustomerID = 0,
                            IsActive = true,
                            OSTANCode = "38",
                            PhoneNumber = "09149686690",
                            Serial = 1,
                            ZoneID = 5
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Messages","Core");
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("RoleDesc")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles","Core");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Order = 1,
                            RoleDesc = "مدیرارشد",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            ID = 2,
                            Order = 2,
                            RoleDesc = "رئیس دفتر",
                            RoleName = "Supervisor"
                        },
                        new
                        {
                            ID = 3,
                            Order = 3,
                            RoleDesc = "مشاور",
                            RoleName = "Consultant"
                        },
                        new
                        {
                            ID = 4,
                            Order = 4,
                            RoleDesc = "کاربران ",
                            RoleName = "User"
                        },
                        new
                        {
                            ID = 5,
                            Order = 5,
                            RoleDesc = "مشتری",
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.RoleActivity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.HasIndex("ActivityID", "RoleID")
                        .IsUnique();

                    b.ToTable("RoleActivities","Core");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ActivityID = 1,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 2,
                            ActivityID = 2,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 3,
                            ActivityID = 3,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 4,
                            ActivityID = 4,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 5,
                            ActivityID = 5,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 6,
                            ActivityID = 6,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 7,
                            ActivityID = 7,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 8,
                            ActivityID = 8,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 9,
                            ActivityID = 9,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 10,
                            ActivityID = 10,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 11,
                            ActivityID = 11,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 12,
                            ActivityID = 12,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 13,
                            ActivityID = 13,
                            RoleID = 1
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.Skill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SkillCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SkillDesc")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SkillTitle")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Skills","Core");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            SkillDesc = "نجاری"
                        },
                        new
                        {
                            ID = 2,
                            SkillDesc = "آشپزی"
                        },
                        new
                        {
                            ID = 3,
                            SkillDesc = "خیاطی"
                        },
                        new
                        {
                            ID = 4,
                            SkillDesc = "برنامه نویس"
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConfirmCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequireChangePass")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users","Core");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConfirmCode = 0,
                            FirstName = "محسن",
                            IsActive = true,
                            IsRequireChangePass = true,
                            LastName = "قاسم زاده",
                            NationalCode = "2755731923",
                            Password = "S1S22YRaY28iYuYV2rhDBkj5tZzEk0swJpWlA735pAY=",
                            PhoneNumber = "09149686690",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.UserBranchRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserBranchRoleID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BranchId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId", "BranchId")
                        .IsUnique();

                    b.ToTable("UserBranchRoles","Core");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BranchId = 1,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.UserBranches", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserBranchID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId", "BranchId")
                        .IsUnique();

                    b.ToTable("UserBranches","Core");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BranchId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.UserMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserMessageID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("MessageID")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverUserID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SenderUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("MessageID");

                    b.HasIndex("ReceiverUserID");

                    b.HasIndex("SenderUserID");

                    b.ToTable("UserMessages","Core");
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.Zone", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abadi")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("AbadiName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BAKHSH")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("BakhshName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Dehestan")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("DehestanName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("OSTAN")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("OSTANCode")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("OstanName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SHAHRESTAN")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ShahrestName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZoneDesc")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ZoneName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Zones","Core");

                    b.HasData(
                        new
                        {
                            ID = 5,
                            Abadi = "00026",
                            AbadiName = "امان آباد",
                            BAKHSH = "02",
                            BakhshName = "مرکزی",
                            Dehestan = "01",
                            DehestanName = "امان آباد",
                            OSTAN = "00",
                            OSTANCode = "38",
                            OstanName = "مرکزی",
                            SHAHRESTAN = "01",
                            ShahrestName = "اراک"
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Customer.Entities.CustomerDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("CustomerDetailTypeID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerHeadID")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("ID");

                    b.HasIndex("CustomerDetailTypeID");

                    b.HasIndex("CustomerHeadID");

                    b.ToTable("CustomerDetails","Customer");
                });

            modelBuilder.Entity("Consulting.Domains.Customer.Entities.CustomerDetailType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("CustomerDetailTypes","Customer");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Code = "موبایل",
                            Name = "Mobile"
                        },
                        new
                        {
                            ID = 2,
                            Code = "تلفن",
                            Name = "phone"
                        },
                        new
                        {
                            ID = 3,
                            Code = "آدرس",
                            Name = "Address"
                        },
                        new
                        {
                            ID = 4,
                            Code = "عکس شناسنامه",
                            Name = "CertificateImage"
                        },
                        new
                        {
                            ID = 5,
                            Code = "عکس پرسنلی",
                            Name = "PersonalImage"
                        },
                        new
                        {
                            ID = 6,
                            Code = "عکس امضا",
                            Name = "SignatureImage"
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Customer.Entities.CustomerHead", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("CustomerGroupID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerUserID")
                        .HasColumnType("int");

                    b.Property<int>("Dependants")
                        .HasColumnType("int");

                    b.Property<int>("EconomicCode")
                        .HasColumnType("int");

                    b.Property<int?>("EducationLevelID")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsCompany")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMaried")
                        .HasColumnType("bit");

                    b.Property<int>("LastEducationLevelID")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("MilitaryServiceStatusID")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("NationalityID")
                        .HasColumnType("int");

                    b.Property<int>("RegisterationCode")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SSH")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("SeriChar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeriNo")
                        .HasColumnType("int");

                    b.Property<int>("Serial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR Customer.CustomerHeadSerialSequence");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("job")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("EducationLevelID");

                    b.HasIndex("NationalCode")
                        .IsUnique()
                        .HasFilter("[NationalCode] IS NOT NULL");

                    b.ToTable("CustomerHeads","Customer");
                });

            modelBuilder.Entity("Consulting.Domains.Customer.Entities.CustomerSkill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerSkillID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SkillID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("SkillID");

                    b.ToTable("CustomerSkills","Customer");
                });

            modelBuilder.Entity("Consulting.Domains.Customer.Entities.EducationLevels", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("EducationLevelsCode")
                        .HasColumnType("int");

                    b.Property<string>("EducationLevelsDesc")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("EducationLevelsName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("EducationLevels","Customer");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EducationLevelsCode = 0,
                            EducationLevelsDesc = "کارشناسی",
                            EducationLevelsName = "Bsc"
                        },
                        new
                        {
                            ID = 2,
                            EducationLevelsCode = 0,
                            EducationLevelsDesc = "کارشناسی ارشد",
                            EducationLevelsName = "Masters"
                        },
                        new
                        {
                            ID = 3,
                            EducationLevelsCode = 0,
                            EducationLevelsDesc = "دکترا و بالاتر",
                            EducationLevelsName = "Doctoral"
                        },
                        new
                        {
                            ID = 4,
                            EducationLevelsCode = 0,
                            EducationLevelsDesc = "دیپلم",
                            EducationLevelsName = "diploma"
                        },
                        new
                        {
                            ID = 5,
                            EducationLevelsCode = 0,
                            EducationLevelsDesc = "زیر دیپلم",
                            EducationLevelsName = "underdiploma"
                        },
                        new
                        {
                            ID = 6,
                            EducationLevelsCode = 0,
                            EducationLevelsDesc = "فوق دیپلم",
                            EducationLevelsName = "upperdiploma"
                        },
                        new
                        {
                            ID = 7,
                            EducationLevelsCode = 0,
                            EducationLevelsDesc = " بی سواد",
                            EducationLevelsName = "nonEducation"
                        });
                });

            modelBuilder.Entity("Consulting.Domains.Empowerment.Entities.Approval", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("sessionID")
                        .HasColumnType("int");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("sessionID");

                    b.ToTable("Approvals","Empowerment");
                });

            modelBuilder.Entity("Consulting.Domains.Empowerment.Entities.Session", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Sessions","Empowerment");
                });

            modelBuilder.Entity("Consulting.Domains.Empowerment.Entities.SessionUsers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SessionUserID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("IsSignatory")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SessonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SessonId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionUsers","Empowerment");
                });

            modelBuilder.Entity("Consulting.Domains.Core.Consult.Entities.Consultant", b =>
                {
                    b.HasOne("Consulting.Domains.Core.Consult.Entities.ConsultType", "ConsultType")
                        .WithMany()
                        .HasForeignKey("ConsultTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consulting.Domains.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consulting.Domains.Core.Consult.Entities.Expertise", b =>
                {
                    b.HasOne("Consulting.Domains.Core.Consult.Entities.Consultant", null)
                        .WithMany("Expertises")
                        .HasForeignKey("ConsultantID");
                });

            modelBuilder.Entity("Consulting.Domains.Core.Consult.Entities.Reply", b =>
                {
                    b.HasOne("Consulting.Domains.Core.Consult.Entities.Question", null)
                        .WithMany("Replies")
                        .HasForeignKey("QuestionID");
                });

            modelBuilder.Entity("Consulting.Domains.Core.Core.Entities.AttachmentType", b =>
                {
                    b.HasOne("Consulting.Domains.Core.Core.Entities.AttachmentTypeCategory", "AttachmentTypeCategory")
                        .WithMany("AttachmentTypes")
                        .HasForeignKey("AttachmentTypeCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.Attachment", b =>
                {
                    b.HasOne("Consulting.Domains.Core.Core.Entities.AttachmentType", "AttachmentType")
                        .WithMany()
                        .HasForeignKey("AttachmentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consulting.Domains.Customer.Entities.CustomerHead", null)
                        .WithMany("Attachments")
                        .HasForeignKey("CustomerHeadID");

                    b.HasOne("Consulting.Domains.Empowerment.Entities.Session", null)
                        .WithMany("Attachments")
                        .HasForeignKey("SessionID");
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.Branch", b =>
                {
                    b.HasOne("Consulting.Domains.Core.Entities.Zone", "Zone")
                        .WithMany("Branches")
                        .HasForeignKey("ZoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.RoleActivity", b =>
                {
                    b.HasOne("Consulting.Domains.Core.Entities.Activity", "Activity")
                        .WithMany("RoleActivity")
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consulting.Domains.Core.Entities.Role", "Role")
                        .WithMany("RoleActivity")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.UserBranchRole", b =>
                {
                    b.HasOne("Consulting.Domains.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consulting.Domains.Core.Entities.Role", "Role")
                        .WithMany("UserBranchRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Consulting.Domains.Core.Entities.User", "User")
                        .WithMany("UserBranchRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.UserBranches", b =>
                {
                    b.HasOne("Consulting.Domains.Core.Entities.Branch", "Branch")
                        .WithMany("UserBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Consulting.Domains.Core.Entities.User", "User")
                        .WithMany("UserBranches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consulting.Domains.Core.Entities.UserMessage", b =>
                {
                    b.HasOne("Consulting.Domains.Core.Entities.Message", "Message")
                        .WithMany("UserMessages")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Consulting.Domains.Core.Entities.User", "ReceiverUser")
                        .WithMany("ReceiverUserMessages")
                        .HasForeignKey("ReceiverUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Consulting.Domains.Core.Entities.User", "SenderUser")
                        .WithMany("SenderUserMessages")
                        .HasForeignKey("SenderUserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Consulting.Domains.Customer.Entities.CustomerDetail", b =>
                {
                    b.HasOne("Consulting.Domains.Customer.Entities.CustomerDetailType", "CustomerDetailType")
                        .WithMany("CustomerDetails")
                        .HasForeignKey("CustomerDetailTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consulting.Domains.Customer.Entities.CustomerHead", "CustomerHead")
                        .WithMany("CustomerDetails")
                        .HasForeignKey("CustomerHeadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consulting.Domains.Customer.Entities.CustomerHead", b =>
                {
                    b.HasOne("Consulting.Domains.Customer.Entities.EducationLevels", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelID");
                });

            modelBuilder.Entity("Consulting.Domains.Customer.Entities.CustomerSkill", b =>
                {
                    b.HasOne("Consulting.Domains.Customer.Entities.CustomerHead", "CustomerHead")
                        .WithMany("CustomerSkills")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consulting.Domains.Core.Entities.Skill", "Skill")
                        .WithMany("CustomerSkills")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consulting.Domains.Empowerment.Entities.Approval", b =>
                {
                    b.HasOne("Consulting.Domains.Empowerment.Entities.Session", "Session")
                        .WithMany("Approvals")
                        .HasForeignKey("sessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consulting.Domains.Empowerment.Entities.SessionUsers", b =>
                {
                    b.HasOne("Consulting.Domains.Empowerment.Entities.Session", "Session")
                        .WithMany("SessionUsers")
                        .HasForeignKey("SessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consulting.Domains.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
